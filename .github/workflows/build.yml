name: Zotero Android Release Tracker

on:
  schedule:
    - cron: "0 0 * * 0"  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggers

# Add top-level permissions
permissions:
  contents: write
  packages: read

jobs:
  check-release:
    name: Check for new Zotero Android release
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check_release.outputs.new_release }}
      release_tag: ${{ steps.check_release.outputs.release_tag }}
    steps:
      - name: Get latest Zotero tag
        id: check_release
        run: |
          # Get the latest tag from Zotero's repo (sorted by version number)
          LATEST_TAG=$(curl -s https://api.github.com/repos/zotero/zotero-android/tags | jq -r '.[0].name')
          echo "Latest Zotero tag: $LATEST_TAG"
          
          # Get our last built tag, default to 'none' if no tags exist
          LAST_BUILT=$(curl -s https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[0].name // "none"')
          echo "Our last built tag: $LAST_BUILT"
          
          if [ "$LAST_BUILT" = "none" ] || [ "$LAST_BUILT" != "$LATEST_TAG" ]; then
            echo "New release detected"
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "release_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "No new release"
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-release
    if: ${{ needs.check-release.outputs.new_release == 'true' }}
    name: Build New Release
    runs-on: ubuntu-latest
    # Add job-level permissions as well
    permissions:
      contents: write
    steps:
      - name: Create and Debug Working Directory
        run: |
          mkdir -p zotero-android
          cd zotero-android
          echo "Now in: $(pwd)"

      - name: Clone Zotero Android repository
        run: |
          echo "Before clone - Current directory: $(pwd)"
          git clone --recursive https://github.com/zotero/zotero-android.git .
          echo "After clone - Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          git checkout ${{ needs.check-release.outputs.release_tag }}
          echo "After checkout - Directory contents:"
          ls -la
        working-directory: zotero-android

      - name: set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle

      - name: set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Create python scripts
        working-directory: zotero-android
        run: |
          # Create bundle_translators.py
          echo '#!/usr/bin/env python3
          import os
          print("Bundle translators script - placeholder")' > bundle_translators.py
          
          # Create bundle_translation.py
          echo '#!/usr/bin/env python3
          import os
          print("Bundle translation script - placeholder")' > bundle_translation.py
          
          # Make scripts executable
          chmod +x bundle_translators.py bundle_translation.py

      - name: Execute bundling scripts
        run: |
          python3 bundle_translators.py
          python3 bundle_translation.py
        working-directory: zotero-android

      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew
        working-directory: zotero-android

      - name: Download Android dependencies
        run: ./gradlew androidDependencies --no-configuration-cache
        working-directory: zotero-android

      - name: Build Debug APK
        run: |
          echo "Building debug APK..."
          ./gradlew assembleDebug --warning-mode all
          
          echo "Exploring build outputs..."
          echo "Contents of app/build:"
          ls -R app/build || echo "app/build not found"
          
          echo "Looking for APK files:"
          find . -name "*.apk"
          
          # Store APK path in output
          APK_PATH=$(find . -name "*.apk" | head -n 1)
          echo "Found APK at: $APK_PATH"
          echo "apk_path=$APK_PATH" >> $GITHUB_ENV
        working-directory: zotero-android

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.check-release.outputs.release_tag }}
          name: Zotero Android ${{ needs.check-release.outputs.release_tag }}
          makeLatest: true
          body: |
            Built from Zotero Android tag ${{ needs.check-release.outputs.release_tag }}
            Source: https://github.com/zotero/zotero-android/tree/${{ needs.check-release.outputs.release_tag }}
          artifacts: ${{ env.apk_path }}
          token: ${{ secrets.GITHUB_TOKEN }}
