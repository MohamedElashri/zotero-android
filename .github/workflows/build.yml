name: Zotero Android Build Tracker

on:
  schedule:
    - cron: "0 */8 * * *"  # every 8 hours
  workflow_dispatch:  # Allow manual triggers

permissions:
  contents: write
  packages: read

jobs:
  check-release:
    name: Check for new Zotero Android release
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check_release.outputs.new_release }}
      release_tag: ${{ steps.check_release.outputs.release_tag }}
    steps:
      - name: Get latest Zotero tag
        id: check_release
        run: |
          # Get all tags and parse them to find the most recent one
          # This will look for the 1.0.0-XXX format tag with the highest number
          ALL_TAGS=$(curl -s https://api.github.com/repos/zotero/zotero-android/tags | jq -r '.[].name')
          
          # Find the highest 1.0.0-XXX format tag
          LATEST_TAG=""
          HIGHEST_NUM=0
          
          while read -r TAG; do
            # Check if the tag matches the 1.0.0-XXX pattern
            if [[ $TAG =~ ^1\.0\.0-([0-9]+)$ ]]; then
              NUM=${BASH_REMATCH[1]}
              if (( NUM > HIGHEST_NUM )); then
                HIGHEST_NUM=$NUM
                LATEST_TAG=$TAG
              fi
            fi
          done <<< "$ALL_TAGS"
          
          # If we didn't find any matching tags, fall back to the first one
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG=$(echo "$ALL_TAGS" | head -n 1)
            echo "Warning: No tags matching 1.0.0-XXX format found, using first tag: $LATEST_TAG"
          else
            echo "Found highest 1.0.0-XXX tag: $LATEST_TAG (number: $HIGHEST_NUM)"
          fi
          
          echo "Latest Zotero tag: $LATEST_TAG"
          
          # Check if we have already built this release by looking at existing tags
          LAST_BUILT=$(curl -s https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[0].name // "none"')
          echo "Our last built tag: $LAST_BUILT"
          
          # Check if we already have a release for this tag
          EXISTING_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_TAG | jq -r '.tag_name // "none"')
          echo "Existing release check: $EXISTING_RELEASE"
          
          if [ "$EXISTING_RELEASE" != "none" ]; then
            echo "This tag has already been built and released. Skipping build."
            echo "new_release=false" >> $GITHUB_OUTPUT
          elif [ "$LAST_BUILT" = "none" ] || [ "$LAST_BUILT" != "$LATEST_TAG" ]; then
            echo "New release detected"
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "release_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "No new release"
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-release
    if: ${{ needs.check-release.outputs.new_release == 'true' }}
    name: Build New Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Working Directory
        run: mkdir -p zotero-android

      - name: Clone Zotero Android repository
        run: |
          git clone --recursive https://github.com/zotero/zotero-android.git .
          git checkout ${{ needs.check-release.outputs.release_tag }}
        working-directory: zotero-android

      - name: set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle

      - name: set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Create python scripts
        working-directory: zotero-android
        run: |
          echo '#!/usr/bin/env python3
          import os
          print("Bundle translators script - placeholder")' > bundle_translators.py
          
          echo '#!/usr/bin/env python3
          import os
          print("Bundle translation script - placeholder")' > bundle_translation.py
          
          chmod +x bundle_translators.py bundle_translation.py

      - name: Execute bundling scripts
        run: |
          python3 bundle_translators.py
          python3 bundle_translation.py
        working-directory: zotero-android

      - name: Update Gradle Properties
        run: |
          echo "" >> gradle.properties
          echo "android.nonTransitiveRClass=true" >> gradle.properties
          echo "android.playPublisher.enabled=false" >> gradle.properties
        working-directory: zotero-android

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: zotero-android

      - name: Build APK
        run: |
          ./gradlew assembleDevDebug --warning-mode all
          
          mkdir -p artifacts
          cp app/build/outputs/apk/dev/debug/app-dev-debug.apk artifacts/zotero-android-${{ needs.check-release.outputs.release_tag }}.apk
        working-directory: zotero-android

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.check-release.outputs.release_tag }}
          name: Zotero Android ${{ needs.check-release.outputs.release_tag }}
          makeLatest: true
          body: |
            Built from Zotero Android tag ${{ needs.check-release.outputs.release_tag }}
            Source: https://github.com/zotero/zotero-android/tree/${{ needs.check-release.outputs.release_tag }}
          artifacts: "zotero-android/artifacts/zotero-android-${{ needs.check-release.outputs.release_tag }}.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
